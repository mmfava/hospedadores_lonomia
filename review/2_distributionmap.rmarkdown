---
title: "Untitled"
format: html
---


## Cleaning data


```{r, include = FALSE}
knitr::opts_chunk$set(dev="cairo_pdf", warning = F, message = F, cache = F)
```

```{r}
## Packages --------------------------------------------------------------------
# library(Taxonstand)
library(CoordinateCleaner) # clean coordinartes
library(maps) # 
#library(TNRS) # 
library(tidyverse) # data manipulation and visualization
library(janitor) # clear table column name
library(leaflet)
library(readxl)
library(tidyverse)
library(sf)                                                                         
library(sp)
library(eks)
library(cowplot)

## Negate funcion ---------------------------------------------------------------
`%!in%` = Negate(`%in%`)

## Session info ------------------------------------------------------------------
sessionInfo()

```

```{r}
## * Lonomia data --------------------------------------------------------------
## !! IMPORTANT: considering diabolus and achelous as the same 
## !! IMPORTANT: considering L. obliqua and L. paraobliqua as the same 
## Lonomia data
df_lonomia <- rio::import("https://docs.google.com/spreadsheets/d/1PzJdUGWxhmMIk8-iGw9YqTbpHNNTPvCMUJOnHefPZD0/edit?usp=sharing") |>
  clean_names() |>
  dplyr::mutate(specie_orig = case_when(
    specie_orig == "Lonomia diabolus" ~ "Lonomia achelous",
    specie_orig == "Lonomia paraobliqua" ~ "Lonomia obliqua",
    TRUE ~ specie_orig)) |> 
  dplyr::filter(str_detect(specie_orig, "achelous|paraobliqua|obliqua")) |>
  dplyr::select(-specie) |>
  dplyr::rename(species=specie_orig) |>
  rowwise() |>
  ## * creates a column of addresses for only the values that I considered 
  ##   plausible to be replaced by coordinates for modeling
  dplyr::mutate(addrs = ifelse(
    use_coordinates %in% "possible", 
    gsub("^,+(,+|\\s|\\-)*", "", paste(location, municipality_department, province_state, country, sep = ", ")),
    NA)) |>
  ## * converting addresses to coordinates and replace in lat and long columns 
  ## !! "osm" = OpenStreetMap data
  ## !! + info: https://jessecambon.github.io/tidygeocoder/articles/geocoder_services.html
  tidygeocoder::geocode(addrs, method = "osm") |>
  dplyr::rename(lat = `lat...7`, long = `long...8`) |>
  dplyr::mutate(
    lat = ifelse(is.na(lat) & !is.na(`lat...18`), `lat...18`, lat),
    long = ifelse(is.na(long) & !is.na(`long...19`), `long...19`, long)
  ) |>
  ## * coluna que ir√° indicar quais coordenadas ser√£o utlizadas na modelagem
  dplyr::mutate(
    coord_model = ifelse(!is.na(lat) & !is.na(long), 1, 0)
  ) |>
  ## * coordinates from cities, state/province and countries
  ## -- will be used to validate the SDM
  tidygeocoder::geocode(
    city = municipality_department, 
    state = province_state,
    country = country,
    method = "osm") |>
  dplyr::rename(lat = `lat...7`, long = `long...8`) |>
  dplyr::mutate(
    lat = ifelse(is.na(lat) & !is.na(`lat...21`), `lat...21`, lat),
    long = ifelse(is.na(long) & !is.na(`long...22`), `long...22`, long)
  )  |>
  ## * add address from coordinates 
  tidygeocoder::reverse_geocode(
    lat = 'lat', long = 'long', 
    method = "osm", full_results=TRUE
  ) |>
  ## * select columns
  dplyr::select(
    species, coord_model, lat = `lat...7`, long = `long...8`, month, year, 
    municipality, county, city, town, state, country = `country...6`, country_code, 
    iso3 = `ISO3166-2-lvl4`,address, boundingbox,
    taxonomic_identification_type, taxnomer_who_identified, reference, 
    reference_type, more_info
  ) |>
  ## * remova empty coordinates
  dplyr::filter(!is.na(lat), !is.na(long))

## * Cleaning occurences
dt_clean <- df_lonomia |>
  CoordinateCleaner::clean_coordinates(
    species = "species",
    lon = "long",
    lat = "lat",
    tests = c("equal", "seas", "zeros"),
    value = "clean",
    report = FALSE) 

```

```{r}
## * transforma em coordenadas
lonomie = dt_clean |>
  select(species, long, lat) |>
  distinct(.keep_all = true) |>
  st_as_sf(coords = c("long", "lat"), crs = "+proj=longlat +datum=WGS84 +no_defs")
```

```{r}
## Hosts occurences
occ <- read.csv2(here::here("Scripts", "datasets", "occ.csv")) 

## (we will use the data in another function)
native_hst <- read_excel(here::here("Scripts","datasets", 
                                    "supplementary_material_1.xlsx"), 
                sheet = "survey_info_hosts") |> 
                select(host_complete_name, native, lonomia_species)
```

```{r}

## lonomie data
# lonomies <- rio::import("https://docs.google.com/spreadsheets/d/1pzjdugwxhmmik8-igw9yqtbphnntpvcmujonhefpzd0/edit?usp=sharing") |>
#     drop_na(long, lat) %>%
#     mutate(specie_orig = case_when(
#       specie_orig == "lonomia diabolus" ~ "lonomia achelous",
#       #specie_orig == "lonomia paraobliqua" ~ "lonomia obliqua",
#       true ~ specie_orig)) |>
#     filter(str_detect(specie_orig, "achelous|paraobliqua|obliqua")) |>
#     select(specie_orig, long, lat) |>
#     distinct(.keep_all = true) |>
#     st_as_sf(coords = c("long", "lat"),
#              crs = "+proj=longlat +datum=wgs84 +ellps=wgs84 +towgs84=0,0,0")

#occ_lonomies <- lonomies |>
#  group_by(specie_orig) |>
#  summarize(geometry = st_union(geometry)) |>
#  st_convex_hull()
```


## Kernell


```{r}
## data ------------------------------------------------------------------------
## south american data
south <- st_read(dsn = here::here("Scripts", "datasets", "South_America")) |>
            st_transform(4326)

## merge with spatial to classify 
## as native or exotic 
dt_maps <- occ |> 
    left_join(native_hst, by = c("Taxon_name" = "host_complete_name")) |>
    mutate(native = ifelse(native == "yes", "Native", "Exotic")) 
```

```{r}
## denstiy kernell -------------------------------------------------------------
## based on:
## https://cran.r-project.org/web/packages/eks/vignettes/tidysf_kde.html
kern_maps <- list()

for(i in c("achelous", "obliqua")){
 
  ## density map (sf)
  krnlm <- dt_maps |> 
    filter(str_detect(native, "Native") &
               str_detect(lonomia_species, i)) |>
    select(Longitude, Latitude) |>
    as_tibble() |>
    st_as_sf(coords = c("Longitude", "Latitude"),
    crs = "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0") |>
    st_kde()
  
  maps <- krnlm$sf |>
    st_intersection(south) |>
    mutate(contlabel = as.numeric(contlabel))
    
  kern_maps[[paste0(i, "_native")]] <- maps
    
}

names(kern_maps)

```


## Figure


```{r}
ggplants <- list()

for(i in names(kern_maps)){

    figs_plan <- ggplot() +
        geom_sf(data = south, fill = "grey80") + 
        geom_sf(data = kern_maps[[i]], 
                aes(fill = contlabel), 
                alpha = 0.8, color = NA, show.legend = FALSE) + 
        scale_fill_gradient2(low = "#4EA699", 
                             mid = "white", midpoint = 50,
                             high = "#ff1b6b", 
                             name = '%') +
        geom_sf(data = south, fill = NA, color = "grey50", size = 1.3) +
        xlim(c(-90, -30)) +
        ylim(c(-55, 12)) +  
        theme_light() +
        theme(axis.title=element_blank(),
            axis.text=element_blank(),
            axis.ticks=element_blank())
    
    ggplants[[i]] <- figs_plan

}


```

```{r}
# Data points
data_points <- read_excel(here::here("Scripts", "datasets", 
                                     "lonomism_southamerica.xlsx"), sheet = "H2") |>
  dplyr::select(long, lat) |>
  dplyr::rename(y = lat, x = long) |>
  SpatialPoints() |>
  st_as_sf() |> 
  st_buffer(dist = 0.5) |> # ! 0.5 degrees
  st_union()


# Including a CRS
st_crs(data_points) <- 4326

#lonomia_name = "Lonomia achelous", lonomia_kern = "achelous_native", shape_type = 24
```

```{r}
## Function that creates the maps
map_function <- function(lonomia_name, lonomia_kern, shape_type){ #kern_maps[[lonomia_kern]]
  
  lonomia_kern <- kern_maps[[lonomia_kern]]
  
  mapita <- ggplot() +
        geom_sf(data = south, fill = 'grey') + 
        geom_sf(data = lonomia_kern, 
                aes(fill = contlabel), 
                alpha = 0.8, color = NA, show.legend = TRUE) + 
        scale_fill_gradient2(low = "#4EA699", 
                             mid = "white", 
                             midpoint = 50,
                             high = "#ff1b6b", 
                             name = 'üå≥ Densidad del kernel') +
        geom_sf(data = south, fill = NA, color = "grey50", linewidth = 1) +
        xlim(c(-90, -30)) +
        ylim(c(-55, 12)) +  
        theme_light() +
  geom_sf(data = data_points, fill = NA,  
          linewidth = 1.2, aes(colour = "Buffer")) +
  scale_colour_manual(values = c("Buffer" = "#FF0000"), 
                        name = "üåç Notificaci√≥n de lonomismo") +
  geom_sf(data = dt_clean |> filter(species %in% lonomia_name), #lonomies
          aes(shape = "Lonomia"),
          size = 6, 
          fill = "#000000", 
          color = "#000000", 
          alpha = 0.7) +
  scale_shape_manual(values = c("Lonomia" = shape_type), 
                     labels = c(lonomia_name),
                     name = c("üêõ Ocurrencias")) +
  theme_bw(base_size = 28) +
  theme(
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    text = element_text(color = "#22211d"),
    #legend.text = element_markdown(),
    plot.background = element_rect(fill = "white", color = NA),
    panel.background = element_rect(fill = "white", color = NA),
    legend.background = element_rect(fill = NA, color = NA),
    plot.title = element_text(size= 22, hjust=0.01, 
                              color = "#4e4d47", 
                              margin = margin(b = -0.1, t = 0.4, l = 2, unit = "cm")),
    plot.subtitle = element_text(size= 17, hjust=0.01, 
                                 color = "#4e4d47", 
                                 margin = margin(b = -0.1, t = 0.43, 
                                                 l = 2, unit = "cm")),
    plot.caption = element_text(size=12, color = "#4e4d47", 
                                margin = margin(b = 0.3, r=-99, unit = "cm")),
    legend.position = c(0.8, 0.18), 
    legend.direction = "horizontal",
    legend.key.height= unit(1.4, 'cm'),
    legend.key.width= unit(2.3, 'cm'),
    legend.spacing.y = unit(0.5, 'cm')) +
    guides(fill = guide_colourbar(title.position="top", title.hjust = 0, order = 3),
         colour = guide_legend(title.position="top", order = 2,
                               title.hjust = 0, legend.title.align=0,
                               label.theme = element_text(size = 28)),
         shape = guide_legend(title.position="top", order = 1,
                              title.hjust = 0, legend.title.align=0,
                              label.theme = element_text(face = "italic",
                                                         size = 28))) +
    ggspatial::annotation_north_arrow(
    location = "tr", 
    which_north = "true",
    pad_x = unit(0.25, "in"), 
    pad_y = unit(0.25, "in"),
    height = unit(5, "cm"),
    width = unit(5, "cm"),
    style = ggspatial::north_arrow_nautical(
      fill = c("grey40", "white"),
      line_col = "grey20",
      text_size = 20))
  
  return(mapita)
}

map_host_ach = map_function("Lonomia achelous", "achelous_native", 24)
map_host_obl = map_function("Lonomia obliqua", "obliqua_native", 25)
map_host_ach
```

```{r fig.height=17, fig.width=26}
cowplot::plot_grid(map_host_ach, map_host_obl, labels = c("A)", "B)"), 
                   label_size = 40, align = "h")
```

```{r fig.height=34, fig.width=13}
cowplot::plot_grid(
  map_host_ach, map_host_obl, 
  label_size = 40, labels = c("A)", "B)"), 
  nrow = 2)
```

