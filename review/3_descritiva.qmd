---
format: docx
editor: visual
---

## Pacotes

```{r setup, include=FALSE}
knitr::opts_chunk$set(
	message = FALSE,
	warning = FALSE
)
```

```{r, include=FALSE}
## Packages --------------------------------------------------------------------
library(tidyverse) # data manipulation and visualization
library(janitor) # clear table column name
library(magrittr) # pip types
library(gtsummary) # result tables
library(gt) # change table format
library(gtExtras)

## Negate funcion ---------------------------------------------------------------
`%!in%` = Negate(`%in%`)

## Session info ------------------------------------------------------------------
sessionInfo()
```

## Data

```{r, include=FALSE}
## host data -----------------------------------------------------------------
# (we will use the data in another function)
status_hst <- readxl::read_excel(here::here("data", "hosts.xlsx"), 
                sheet = "survey_info_hosts") |>
  clean_names() |>
  select(-latex) |>
  mutate(native = ifelse(native == "yes", 1, 0)) |>
  mutate(one_antro_use = +any(str_detect(c_across(use_popular_medicine:use_agroforestry), "yes"))) |>
  mutate(sps_name = paste0(host_complete_name, " ", canonical_author))

names(status_hst)
```

## Analysis

> Analysis by species. Separate for *Lonomia obliqua* and *Lonomia achelous*.

```{r, include=FALSE}
# function to add pairwise copmarisons to `tbl_summary()`
add_stat_pairwise_cs <- function(data, variable, by, tbl,...) {

  d = data[[variable]]
  e = d[!is.na(d)] |> table() |> chisq.test()
  l = e$residuals |> length()
  
  if(l == 1){
    
    class_ress <- c("-")
    
  } 
  else if(l == 2){
    fq_class <- function(a,b,p){
    
      case_when(p < 0.05 & a > b ~ c("▲", "▼"),
                p < 0.05 & a < b ~ c("▼", "▲"),
                TRUE ~ c("-", "-"))
    }
    
    class_res <- fq_class(e$residuals[[1]], e$residuals[[2]], e$p.value)
    
  }else{
    fq_class <- function(e){
      
      if(e$p.value < 0.05){
        res <- case_when(e$residuals < -1.96 ~ "▼",
                       e$residuals > 1.96 ~ "▲",
                       TRUE ~ "-")
      }else{
        res <- rep("-", length(e$residuals))
      }
      
      return(res)
      
    }
    
    class_res <- fq_class(e)
    
  }
  
  return(tibble(residuals = class_res))
    
  #class_res |> as_tibble()
  #e$p.value
  #tibble(residuals = class_res, p = e$p.value) |>
  #  mutate(p = ifelse(!duplicated(p), p, NA))
  
}

add_stat_pairwise_csp <- function(data, variable, by, tbl,...) {
  
  d = data[[variable]]
  e = d[!is.na(d)] |> table() |> chisq.test()
  
  tibble("p" = e$p.value)

}

antrop_desc <- function(status_hst, sp){
  
  status_hst |>
  filter(str_detect(lonomia_species, sp)) |>
  select(use_popular_medicine:use_energy_generation, use_of_wood:use_agroforestry) |>
  tbl_summary(
    missing = "no",
    #missing_text = "(Unknown)",
    type = list(all_categorical() ~ "categorical"),
    label = list(use_popular_medicine ~ "Popular medicine",
      use_consume_fruits ~ "Edible fruits",
      use_fruits_commercialized ~ "Marketable fruits",
      use_energy_generation ~ "Power generation (coal or firewood)",
      use_of_wood ~ "Commercial wood",
      use_for_paper ~ "Paper",
      use_urban_afforestation ~ "Urban afforestation",
      use_agroforestry ~ "Agroforestry")) |>    
  add_stat(fns = all_categorical() ~ add_stat_pairwise_cs, 
           location = everything() ~ "level") |>    
  add_stat(fns = all_categorical() ~ add_stat_pairwise_csp) |>   
  modify_header(p = "**p-value**", # n = "**Missing**", stat0 = "N = 62"
                label = "**variables**",
                residuals = "**freq. class.**") |>
  modify_footnote(p ~ "Chi-Square Goodness of Fit Test (α = 0.05)",
                  residuals ~ "Frequency classification")|> 
  modify_fmt_fun(
    update = p ~ function(x) style_pvalue(x, digits = 3))
                  
}

distrib_desc <- function(status_hst, sp){
  status_hst |>
    filter(str_detect(lonomia_species, sp) & native == 1) |>
    select(endemic_south_america, # native
           endemic_biome_south_america, red_list_status,
           deciduos:evergreen, light_demand) |>
    tbl_summary(
      missing = "no",
      #missing_text = "(Unknown)",
      type = list(all_categorical() ~ "categorical"),
      label = list(#native ~ "Native",
        red_list_status ~ "Red list status",
        endemic_south_america ~ "Endemic in South America",
        endemic_biome_south_america ~ "Endemic in a biome",
        deciduos ~ "Deciduos",
        semideciduos ~ "Semideciduos",
        evergreen ~ "Evergreen",
        light_demand ~ "Light demander/Heliophile")) |>    
    add_stat(fns = all_categorical() ~ add_stat_pairwise_cs, 
             location = all_categorical() ~ "level") |>    
    add_stat(fns = all_categorical() ~ add_stat_pairwise_csp) |>   
    modify_header(p = "**p-value**", # n = "**Missing**", stat0 = "N = 62"
                  label = "**variables**",
                  residuals = "**freq. class.**") |>
    modify_footnote(p ~ "Chi-Square Goodness of Fit Test (α = 0.05)",
                    residuals ~ "Frequency classification") |> 
    modify_fmt_fun(
      update = p ~ function(x) style_pvalue(x, digits = 3))
}

family_desc <- function(status_hst, sp){

    add_genus <- function(data, variable, ...) {

  data.frame(family = status_hst[['family']], 
             genus = status_hst[["host_complete_name"]],
             sps = status_hst[["lonomia_species"]]) %>%
    filter(str_detect(sps, {{sp}})) %>%
  dplyr::group_by(family) %>%
  dplyr::summarise(genus = paste(genus, collapse = ", ")) %>%
  select(genus) 
  
  }
  
  status_hst |>
      filter(str_detect(lonomia_species, sp)) |>
      select(family, genus) |>
      tbl_summary(
        missing = "no",
        include = -genus,
        #missing_text = "(Unknown)",
        type = list(all_categorical() ~ "categorical"),
        label = list(#native ~ "Native",
          #genus ~ "Genus",
          family ~ "Family")) |>
     add_stat(fns = all_categorical() ~ add_stat_pairwise_cs, 
               location = all_categorical() ~ "level") |>
     add_stat(fns = all_categorical() ~ add_stat_pairwise_csp) |>
     add_stat(fns = all_categorical() ~ add_genus, 
               location = all_categorical() ~ "level") |> 
      modify_header(p = "**p-value**", # n = "**Missing**", stat0 = "N = 62"
                    label = "**variables**",
                    residuals = "**freq. class.**",
                    genus = "**Host species**") #|>
      #modify_footnote(p ~ "Chi-Square Goodness of Fit Test (α = 0.05)",
      #                residuals ~ "Frequency classification by Pearson residuals") |> 
      #modify_fmt_fun(
      #  update = p ~ function(x) style_pvalue(x, digits = 3))
}
```

```{r}
## Tabela family
tbl_merge(list(family_desc(status_hst, "achelous"), 
               family_desc(status_hst, "obliqua")), 
          tab_spanner = c("*Lonomia achelous*", "*Lonomia obliqua*")) |> 
  bold_labels() |>
  as_gt() |>
  gt::tab_options(table.font.size = '12px') 
```

\newpage

```{r}
## Tabela antropogenic
tbl_merge(list(antrop_desc(status_hst, "achelous"), 
               antrop_desc(status_hst, "obliqua")), 
          tab_spanner = c("*Lonomia achelous*", "*Lonomia obliqua*")) |> 
  bold_labels() |>
  as_gt() |>
  gt::tab_options(table.font.size = '12px')
```

\newpage

```{r}
## Distribution
tbl_merge(list(distrib_desc(status_hst, "achelous"), 
               distrib_desc(status_hst, "obliqua")), 
          tab_spanner = c("*Lonomia achelous*", "*Lonomia obliqua*")) |> 
  bold_labels()  |> 
  modify_column_hide(columns = c(add_stat_1_1, add_stat_2_1)) |>
  as_gt() |>
  gt::tab_options(table.font.size = '12px')
```

\newpage

```{r}
#Importing main data
initial_data <- rio::import(
  here::here("Scripts/datasets", "supplementary_material_1.xlsx"), sheet = 'lonomia_host') 

tab_yr <- initial_data |>
  dplyr::arrange(host_especies, min_year) |>
  pivot_wider(names_from = "lonomia_species", 
              values_from = "min_year", values_fn = ~min(.x)) |>
  dplyr::group_by(host_especies) |>
  dplyr::summarise(year_achelous = min(`Lonomia achelous`),
                   year_obliqua = min(`Lonomia obliqua`),
                   references = paste(references, collapse = ", "), .groups = "keep")

status_hst |>
  left_join(tab_yr, by = c("host_complete_name" = "host_especies")) |> 
  #mutate(n = 1) |>
  select(family, lonomia_species, host_complete_name, 
         native, year_achelous,  year_obliqua, references) |>
  mutate(native = ifelse(native == 1, "yes", "no")) |>
  mutate_at(vars(year_achelous,  year_obliqua), as.character) |>
  mutate_at(vars(year_achelous,  year_obliqua), replace_na, "-") |>
  select(-lonomia_species) |>
  arrange(family, host_complete_name) |>
  #gt(groupname_col = "family") |>
  gt() |>
  gt_merge_stack(col1 = host_complete_name, col2 = family) |>
  cols_label(
    host_complete_name = "host species/family",
    year_achelous = "Lonomia achelous¹",
    year_obliqua = "Lonomia obliqua¹",
  ) |>
  tab_footnote(
    footnote = "¹Year of first interaction record.
    If the documentation does not include the sampling year, the document's year is used instead."
    #locations = cells_column_labels(columns = msrp)
  ) |>
  gt_theme_espn() |>
  gt::tab_options(table.font.size = '12px') 

```

\newpage

```{r cars, eval=FALSE, include=FALSE}
#Libraries
library(rio)
library(tidyverse)
library(patchwork)
library(ggtext)
library(cowplot)

#Complementary data
hosts_info <- rio::import(here::here("Scripts/datasets", "supplementary_material_1.xlsx"), sheet = "survey_info_hosts") |> 
  rename(host_especies = host_complete_name) |> 
  distinct(host_especies, .keep_all = T) |> 
  select(-lonomia_species)

#Agreggating function for an x that could be the host species, host family, host genera
agg_function <- function(data, x){    
    #getting the combinations of x for each lonomia species for each year
    select(data, lonomia_species, {{x}}, min_year, Native) |> 
    distinct(lonomia_species, {{x}}, min_year, .keep_all = T) |>
    #getting the first year each x appear for each lonomia species
    group_by(lonomia_species, {{x}}) |>
    mutate(min_year = min(min_year))  |>
    #taking out times it appeared again
    distinct(lonomia_species, {{x}}, min_year, Native) |> #aqui
    #group by year and species, as we have occurances on the level of x
    group_by(lonomia_species, min_year, Native) |> 
    mutate(caso = 1) |> 
    summarise(total_in_that_year = sum(caso)) |>
    # #getting cumulative values
    mutate(aggregate_n_for_that_year =
              cumsum(total_in_that_year))
}

#Function to complete the data and prepare it to be plotted
plot_preparer <- function(data, filter, aggregation, completion){
  filter(data, {{aggregation}} == filter) |>
    ungroup() |>
    select(-aggregate_n_for_that_year,-{{aggregation}}) |>
    complete(min_year = c(completion), Native) |>
    #replacing na in species found that year for 0, as indeed years i am adding didnt have any species found(otherwise theyd be in the data)
    mutate(total_in_that_year = case_when(is.na(total_in_that_year) ~ 0,
                                          TRUE ~ total_in_that_year)) |>
    group_by(Native) |>
    mutate(aggregate_n_for_that_year =
             cumsum(total_in_that_year))
}

##Plots
plotter <- function(data, title, ticks){
  
  ggplot(data, aes(group = Native, shape = Native, color = Native, 
                   y = aggregate_n_for_that_year, x = min_year)) + 
    geom_bar(position="stack", fill = "grey90", ##ECEAE4
             stat="identity", color = "grey90", width = 2) +
    scale_color_manual(values = c("#2DAF35", "#F4B01E", "grey40")) +
    geom_line(linetype = 1, size = 1.1, alpha = 0.5)+
    #geom_path() +
    geom_point(size = 2.1) +
    labs(title = title,
         x = 'Year',
         y = 'Number of hosts') +
    xlim(1989.5, 2021) +
    scale_y_continuous(breaks = ticks, limits = c(0, 60)) +
    theme_bw(base_size = 15) +
    theme(plot.title = element_markdown(size = 16),
          axis.title.y = element_markdown()) 
}

###Host species
#host species dataset for both lonomias
host_species <- initial_data |> agg_function(host_especies) 

## graphical  ----------------------------------------------------------
#achelous: 1978:2020, seq(0, 20, by = 1)
species1 <- host_species |> 
  plot_preparer(filter ="Lonomia achelous", 
                aggregation = lonomia_species, 1978:2020 ) |> 
  plotter("A) *Lonomia achelous*",seq(0, 60, by = 5))

species1

#obliqua: 1968 a 2020 e ticks sao 0 a 70, de 5 em 5
species2 <- host_species |> 
  plot_preparer(filter ="Lonomia obliqua",
                aggregation = lonomia_species, 1968:2020) |> 
  plotter("B) *Lonomia obliqua*", seq(0, 60, by = 5))

leggraph <- get_legend(species1 + theme(legend.position = "bottom")) #+ theme(legend.position = "bottom")

a <- plot_grid((species1 + theme(legend.position="none"))/(species2 + theme(legend.position="none")), ncol = 1) 

#{r fig.width=8, fig.height=10}
#plot_grid(a, leggraph, ncol = 1, align = "v", rel_heights = c(1,.05))

# save image
ragg::agg_tiff("especies_tempo.tiff", width = 8, 
               height = 11, units = "in", res = 400)
plot_grid(a, leggraph, ncol = 1, align = "v", rel_heights = c(1,.05))
dev.off()
```
